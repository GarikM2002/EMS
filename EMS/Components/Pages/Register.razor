@page "/register"

@inject AuthService AuthService
@inject NavigationManager Navigation
@inject RegistrationViewModelValidator validator

<MudGrid Justify="Justify.Center">
	<MudItem xs="12" md="8">
		<MudPaper Class="pa-4">
			<MudText Typo="Typo.h4" Class="mb-4">Register</MudText>
			<MudForm Model="registerRequest" @ref="form" Validation="validator.ValidateValue">
				<MudTextField @bind-Value="registerRequest.FirstName" Label="First Name" Immediate="true"
							  InputType="InputType.Text" For="() => registerRequest.FirstName" />
				<MudTextField @bind-Value="registerRequest.LastName" Label="Last Name" Immediate="true"
							  InputType="InputType.Text" For="() => registerRequest.LastName" />
				<MudTextField @bind-Value="registerRequest.Email" Label="Email" Immediate="true"
							  InputType="InputType.Email" For="() => registerRequest.Email" />
				<MudTextField @bind-Value="registerRequest.Password" Label="Password" Immediate="true"
							  InputType="InputType.Password" For="() => registerRequest.Email" />
				<MudButton Color="Color.Primary" Variant="Variant.Filled"
						   Class="ml-auto mt-4" OnClick="HandleRegister">Register</MudButton>
			</MudForm>
			@foreach (var e in errorMessages)
			{
				<MudText Color="Color.Error" Class="mt-2">@e</MudText>
			}
		</MudPaper>
	</MudItem>
</MudGrid>

@code {
	private MudForm form = null!;
	private RegistrationViewModel registerRequest = new();
	private string[] errorMessages = [];

	private async Task HandleRegister()
	{
		await form.Validate();

		if (!form.IsValid)
			return;

		var response = await AuthService.RegisterAsync(registerRequest);
		if (response.IsSuccessStatusCode)
		{
			Navigation.NavigateTo("/login");
		}
		else
		{
			errorMessages = ["Registration failed", await response.Content.ReadAsStringAsync()];
		}
	}
}
