@page "/contracts"
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject ContractService ContractService

<MudContainer Class="xs-12 md-9">
	<MudText Typo="Typo.h3">Contracts</MudText>

	@if (contracts == null)
	{
		<MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
	}
	else
	{
		<MudTextField @bind-Value="searchPattern" Label="Search" Variant="Variant.Outlined"
					  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"
					  Immediate="true" OnKeyUp="SearchContracts" Class="my-5"></MudTextField>

		<MudTable @ref="table" Items="contracts" Hover="true" ServerData="new Func<TableState,
				Task<TableData<ContractViewModel>>>(LoadContracts)">
			<HeaderContent>
				<MudTh>Id</MudTh>
				<MudTh>ContractTypeId</MudTh>
				<MudTh>Description</MudTh>
				<MudTh>Start Date</MudTh>
				<MudTh>End Date</MudTh>
				<MudTh>Salary</MudTh>
				<MudTh>EmployeeEmployersId</MudTh>
				<MudTh>Actions</MudTh>
			</HeaderContent>
			<RowTemplate>
				<MudTd DataLabel="Id">@context.Id</MudTd>
				<MudTd DataLabel="Contract Type Id">@context.ContractTypeId</MudTd>
				<MudTd DataLabel="Description">@context.Description</MudTd>
				<MudTd DataLabel="Start Date">@context.StartDate!.Value.ToString("MM-dd-yyyy")</MudTd>
				<MudTd DataLabel="End Date">@(context.EndDate.HasValue ? context.EndDate.Value.ToString("MM-dd-yyyy") : "")</MudTd>
				<MudTd DataLabel="Salary">@context.Salary</MudTd>
				<MudTd DataLabel="EmployeeEmployersId">@context.EmployeeEmployersId</MudTd>
				<MudTd DataLabel="Actions">
					<MudButton OnClick="() => NavigateToEditContract(context.Id)" Color="Color.Primary"
							   Variant="Variant.Filled" Class="my-3">Edit</MudButton>
					<MudButton OnClick="async () => await DeleteContract(context.Id)" Color="Color.Secondary"
							   Variant="Variant.Filled" Class="my-3">Delete</MudButton>
				</MudTd>
			</RowTemplate>
			<PagerContent>
				<MudTablePager PageSizeOptions="@(new HashSet<int>([defaultPageSize, 1, 2, 3, 5, 10]).ToArray())" />
			</PagerContent>
		</MudTable>
		<MudButton OnClick="NavigateToCreateContract" Color="Color.Primary" Variant="Variant.Filled"
				   Class="mt-5">Create New Contract</MudButton>
	}
</MudContainer>

@code {
	private MudTable<ContractViewModel> table = new();
	private IEnumerable<ContractViewModel> contracts = null!;
	private string searchPattern = string.Empty;
	private int defaultPageSize = 3;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender)
		{
			return;
		}

		if (!await AuthService.IsUserAuthenticatedAsync())
		{
			Navigation.NavigateTo("/");
			return;
		}

		await LoadContracts();
		StateHasChanged();
	}

	private void NavigateToCreateContract()
	{
		Navigation.NavigateTo("/contracts/create");
	}

	private void NavigateToEditContract(int id)
	{
		Navigation.NavigateTo($"/contracts/edit/{id}");
	}

	private async Task DeleteContract(int id)
	{
		await ContractService.DeleteContractAsync(id);
		await table.ReloadServerData();
	}

	private async Task SearchContracts()
	{
 		await table.ReloadServerData();
	}

	private async Task<TableData<ContractViewModel>> LoadContracts(TableState state = default!)
	{
		if (state is null)
			state = new() { PageSize = defaultPageSize };

		int? total = 0;
		var patternNormalized = searchPattern.Replace("/", "");

		if (string.IsNullOrWhiteSpace(patternNormalized))
		{
			contracts = (await ContractService.GetAllContractsAsync(state.Page, state.PageSize))!;
			total = (await ContractService.GetAllContractsAsync())?.Count();
		}
		else
		{
			contracts = (await ContractService.GetContractsBySearchPatternAsync(patternNormalized,
				state.Page, state.PageSize))!;
			total = (await ContractService.GetContractsBySearchPatternAsync(patternNormalized))?.Count();
		}

		return new() { Items = contracts, TotalItems = total ?? 0 };
	}
}
