@page "/login"

@inject IJSRuntime jsRuntime
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject LocalStorageService localStorageService
@inject LoginViewModelValidator loginValidator

<MudGrid Justify="Justify.Center">
	<MudItem xs="12" md="8">
		<MudPaper Class="pa-4">
			<MudForm Model="model" @ref="form" Validation="loginValidator.ValidateValue">
				<MudTextField @bind-Value="model.Email" T="@string" Label="Email" For="@(() => model.Email)"
							  Immediate="true" />
				<MudTextField @bind-Value="model.Password" T="@string" Label="Password" For="@(() => model.Password)"
							  HelperText="Enter your password" InputType="InputType.Password" Immediate="true" />
				<MudItem Class="d-flex align-items-center justify-content-between mt-4">
					<MudButton Variant="Variant.Filled" Color="Color.Primary"
							   Class="ml-auto" OnClick="OnLogin">
						Login
					</MudButton>
				</MudItem>
			</MudForm>
			@if (errorMessage is not null)
			{
				<MudText Color="Color.Error" Class="mt-2">@errorMessage</MudText>
			}
		</MudPaper>
	</MudItem>
</MudGrid>

@code {
	MudForm form = null!;
	LoginViewModel model = new LoginViewModel();
	private string? errorMessage;

	private async Task OnLogin()
	{
		await form.Validate();

		if (!form.IsValid)
			return;

		var response = await AuthService.LoginAsync(model);

		if (response.IsSuccessStatusCode)
		{
			var token = (await response.Content.ReadAsStringAsync());
			token = JsonSerializer.Deserialize<Dictionary<string, string>>(token)?["token"];

			// Store the token in local storage
			await localStorageService.SetAuthTokenAsync(token!);

			await jsRuntime.InvokeVoidAsync("alert", token);

			Navigation.NavigateTo("/", true);
		}
		else
		{
			errorMessage = "Invalid login attempt. Please check your credentials and try again.";
		}
	}
}