@inject AuthService auth
@inject IDialogService dialogService
@inject NavigationManager navigation

<MudNavMenu Class="mt-16">
	<MudNavLink Href="/" Match="NavLinkMatch.All" Class="mud-nav-link">
		<MudIcon Icon="@Icons.Material.Filled.Home" Class="mud-icon" /> Home
	</MudNavLink>
	@if (!isAuthenticated)
	{
		<MudNavLink Href="/login" Match="NavLinkMatch.Prefix" Class="mud-nav-link">
			<MudIcon Icon="@Icons.Material.Filled.Login" Class="mud-icon" /> Login
		</MudNavLink>
		<MudNavLink Href="/register" Match="NavLinkMatch.Prefix" Class="mud-nav-link">
			<MudIcon Icon="@Icons.Material.Filled.PersonAdd" Class="mud-icon" /> Register
		</MudNavLink>
	}
	else
	{
		<MudButton OnClick="LogoutAsync" Class="mud-nav-link ml-7">
			<MudIcon Icon="@Icons.Material.Filled.DoorBack" Class="mud-icon" /> Log out
		</MudButton>
		<MudNavLink Href="/contracts" Match="NavLinkMatch.Prefix" Class="mud-nav-link">
			<MudIcon Icon="@Icons.Material.Filled.Description" Class="mud-icon" /> Contracts
		</MudNavLink>
	}
</MudNavMenu>

@code {
	bool isAuthenticated;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		Console.WriteLine("\n\nFirstrender = " + firstRender + "\n\n");

		if (firstRender)
		{
			await HandleLoginAsync();
			StateHasChanged();
		}
	}

	public async Task HandleLoginAsync()
	{
		isAuthenticated = await auth.IsUserAuthenticatedAsync();

		Console.WriteLine("isAuthenticated = " + isAuthenticated);
	}

	public async Task LogoutAsync()
	{
		DialogResult dialogResult = await (await dialogService.ShowAsync<LogoutDialog>("Logout Confirmation")).Result;

		if (dialogResult.Canceled)
		{
			return;
		}

		await auth.LogoutAsync();
		await HandleLoginAsync();

		Console.WriteLine("Logout");

		navigation.NavigateTo("/");
	}
}
